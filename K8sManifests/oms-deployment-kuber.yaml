apiVersion: apps/v1
kind: Deployment
metadata:
  name: oms-app-deplyment
  labels:
    app: oms-app
spec:
  strategy:
    rollingUpdate:
      maxUnavailable: 20%
      maxSurge: 20%
      # type: Recreate
  selector:
    matchLabels:
      app: oms-app
  replicas: 3
  template:
    metadata:
      labels:
        app: oms-app
        # The serviceId label is used to identify the service to Orleans
        orleans/serviceId: mofid-oms
        orleans/clusterId: mofid-oms-cluster
    spec:
      containers:
      - name: omsapp
        image: your-docker-image-url
        imagePullPolicy: IfNotPresent #Always
        ports:
        # Define the ports which Orleans uses
        - containerPort: 11111
        - containerPort: 30000
        # Define the ASP.NET Core ports
        - containerPort: 5001
        lifecycle:
          preStop:
            exec:
              command: ["sleep", "15"]
        resources:
          limits:
            memory: 1024Mi
            cpu: "2"
        env:
        - name: ASPNETCORE_HTTP_PORTS
          value: "5001"
        - name: ORLEANS_SERVICE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['orleans/serviceId']
        - name: ORLEANS_CLUSTER_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['orleans/clusterId']
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: DOTNET_SHUTDOWNTIMEOUTSECONDS
          value: "120"
          #------------------------------------
      - name: omsgateway
        image: your-docker-image-url
        imagePullPolicy: Always
        ports:
        # Define the ports which Orleans uses
        # - containerPort: 11111
        # - containerPort: 30000
        # Define the ASP.NET Core ports
        - containerPort: 5002
        lifecycle:
          preStop:
            exec:
              command: ["sleep", "15"]
        resources:
          limits:
            memory: 1024Mi
            cpu: "2"
        env:
        - name: ASPNETCORE_HTTP_PORTS
          value: "5002"
        - name: ORLEANS_SERVICE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['orleans/serviceId']
        - name: ORLEANS_CLUSTER_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['orleans/clusterId']
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: DOTNET_SHUTDOWNTIMEOUTSECONDS
          value: "120"

          # - name: REDIS
          #   value: "redis" # The name of the redis service defined above
      terminationGracePeriodSeconds: 10 #This option would make the kubelet wait for 45 seconds before advancing the SIGTERM, although it should be noted that this might not be enough since your application might still be handling some older requests. 
  minReadySeconds: 60
---
apiVersion: v1
kind: Service
metadata:
  name: orleans-oms-app-service
  namespace: orleans
spec:
  selector:
    app: "oms-app"
  type: ClusterIP
  clusterIP: 10.233.0.160
  ports:
  - name: http-os-app
    protocol: TCP
    port: 5001
    targetPort: 5001
  - name: http-orleans-port1
    protocol: TCP
    port: 11111
    targetPort: 11111
  - name: http-orleans-port3
    protocol: TCP
    port: 30000
    targetPort: 30000
---
apiVersion: v1
kind: Service
metadata:
  name: orleans-oms-gateway-service
  namespace: orleans
spec:
  selector:
    app: "oms-app"
  type: ClusterIP
  clusterIP: 10.233.0.161
  ports:
  - name: http-oms-gateway
    protocol: TCP
    port: 5002
    targetPort: 5002
---
# Ingress managing external accesss to the webapp service
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: oms-gateway-ingress
  namespace: orleans
  annotations:
    # kubernetes.io/ingress.class: kong
    konghq.com/strip-path: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "false" # If you're not using HTTPS
spec:
  ingressClassName: kong
  rules:
  - host: address
    http:
      paths:
      - backend:
          service:
            name: orleans-oms-gateway-service
            port:
              number: 5002
        path: /
        pathType: Prefix
---
# Ingress managing external accesss to the webapp service
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: oms-app-ingress
  namespace: orleans
  annotations:
    # kubernetes.io/ingress.class: kong
    konghq.com/strip-path: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "false" # If you're not using HTTPS
spec:
  ingressClassName: kong
  rules:
  - host: address
    http:
      paths:
      - backend:
          service:
            name: orleans-oms-app-service
            port:
              number: 5001
        path: /
        pathType: Prefix
